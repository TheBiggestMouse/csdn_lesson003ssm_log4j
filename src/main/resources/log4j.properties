# Root logger option 这个是log4j的根配置,必不可少的,其中DEBUG是日志的级别(ALL<DEBUG<INFO<WARN<ERROR<FATAL<OFF),
# 什么意思呢?拿个栗子,你是一家公司老总,财务支出的时候总得跟你说一声吧,那总不能支出一块钱都得跟你汇报吧,那你不是忙死了,所
# 以呢,你就定个级别,你告诉财务支出100万以上告诉我就行了,过两天你发现根本就没有100万以上的支出,你又跟财务说10万以上就得告诉我,
# 结果又过两天你发现10万以上的支出也很少,但是账户的钱确少的很多,你又跟财务说1万以上的就得告诉我,又过了两天你要对公司的财务支出
# 全部做到心中有数,你告诉财务1块钱的支出你也得告诉我.这就是级别,1<1万<10万<100万).系统将什么级别的信息记录下来,你就设置对应的级别.
# stdout(百度翻译:标准输出),自行测试一下,不加上它的话,控制台输出不了内容,file将日志的信息以文件的形式保存.
log4j.rootLogger=DEBUG, stdout, file
 
# Redirect log messages to console  使用org.apache.log4j.ConsoleAppender类输出
log4j.appender.stdout=org.apache.log4j.ConsoleAppender 
# 相当于你用System.out.print()在控制台打印,如果配置成System.err,那么就相当于你用System.err.println()进行打印(都是红色),但是不一定换行,我没试过
log4j.appender.stdout.Target=System.out
# 使用org.apache.log4j.PatternLayout类设置输出的格式
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
# %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n 配置输出的格式,最后一个%m%n 配置log4j以添加换行符.％L设置从记录请求的行号.
# ％c{1}引用通过 getLogger()设置的日志记录名称.％-5p设置日志记录优先级,如DEBUG或ERROR.你可以自己打印出来之后再试着去掉一些配置看看效果
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
 
# Redirect log messages to a log file, support file rolling.  使用org.apache.log4j.RollingFileAppender类输出文件,
# 这个类可以追加文件,什么意思?按我们的配置举例,MaxFileSize=5MB,当你的日志文件大小达到5mb的时候,他会在重新创建一个文件,最多创建多少个呢?
# MaxBackupIndex=10,配置是多少就创建多少.
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File=D:\\log4j.log
log4j.appender.file.MaxFileSize=5MB
log4j.appender.file.MaxBackupIndex=10
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n